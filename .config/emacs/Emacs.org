#+TITLE: Emacs configuration
#+AUTHOR: Andrea Orione
#+DESCRIPTION: My personal configuration (still work in progress)
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Table of contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:
:CONTENTS:
- [[#startup-performance][Startup performance]]
- [[#hiding-unnecessary-stuff][Hiding unnecessary stuff]]
  - [[#custom-variables][Custom variables]]
- [[#package-management][Package management]]
  - [[#use-package][Use package]]
    - [[#verbose-startup][Verbose startup]]
  - [[#automatic-package-updates][Automatic package updates]]
- [[#keybinding-configuration][Keybinding configuration]]
  - [[#set-esc-to-terminate-action][Set ESC to terminate action]]
  - [[#delete-selection-mode][Delete selection mode]]
  - [[#rebind-c-u][Rebind C-u]]
  - [[#evil-mode][Evil-mode]]
  - [[#undo-tree][Undo-tree]]
  - [[#which-key][Which key]]
  - [[#general][General]]
  - [[#hydra][Hydra]]
- [[#ui-configuration][UI configuration]]
  - [[#basic-ui-config][Basic UI config]]
  - [[#theme][Theme]]
  - [[#dashboard][Dashboard]]
  - [[#font-configuration][Font configuration]]
    - [[#text-scaling][Text scaling]]
    - [[#unicode-glyph][Unicode glyph]]
    - [[#emojis][Emojis]]
  - [[#modeline][Modeline]]
    - [[#time-configuration][Time configuration]]
    - [[#diminish-mode][Diminish mode]]
    - [[#minions][Minions]]
    - [[#doom-modeline][Doom modeline]]
  - [[#workspaces][Workspaces]]
  - [[#notifications][Notifications]]
- [[#auto-saving-configuration][Auto saving configuration]]
  - [[#super-save][Super save]]
  - [[#auto-reverting][Auto reverting]]
- [[#editing-configuration][Editing configuration]]
  - [[#tab-configuration][Tab configuration]]
  - [[#commenting][Commenting]]
  - [[#automatically-clear-whitespaces][Automatically clear whitespaces]]
  - [[#code-folding][Code folding]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
  - [[#rainbow-mode][Rainbow mode]]
  - [[#highlight-indentation][Highlight indentation]]
- [[#emacs-completion][Emacs completion]]
  - [[#ivy-and-counsel][Ivy and Counsel]]
  - [[#helpful-commands][Helpful commands]]
- [[#file-management][File management]]
  - [[#dired][Dired]]
    - [[#key-bindings][Key-bindings]]
    - [[#dired-configuration][Configuration]]
                                      
* Startup performance
:PROPERTIES:
:CUSTOM_ID: startup-performance
:END:
This section makes some changes to the garbage collection (deallocation of no more used memory) to load emacs faster. It reduces the garbage collections per second speeding up the process.
However this changes make emacs use a lot more memory, so it is important to return to the default values at the end of the start up. This is done in the [[#runtime-performance][Runtime performance]] section at the end of the file.
The garbage collection method is paired with delaying the load of some package stricly to the moment they are required.

#+begin_src emacs-lisp

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

#+end_src

* Hiding unnecessary stuff
:PROPERTIES:
:CUSTOM_ID: hiding-unnecessary-stuff
:END:
** Custom variables
:PROPERTIES:
:CUSTOM_ID: custom-variables
:END:
Emacs sets some variables by default and lets you modify them throught a visual editor, then stores their values in the init.el file. Since we are not using this system, we want to hyde those variables in another file.

#+begin_src emacs-lisp

(setq custom-file "~/.config/emacs/custom.el")
(load custom-file)

#+end_src

* Package management
:PROPERTIES:
:CUSTOM_ID: package-management
:END:
This section sets up ELPA, MELPA, and Org repositories. Then it initializes and configures [[https://github.com/jwiegley/use-package][use-package]]. This package simplifies life when comes to importing other packages and configuring them.

#+begin_src emacs-lisp

;; Initializing packge source
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

#+end_src

** Use package
:PROPERTIES:
:CUSTOM_ID: use-package
:END:

#+begin_src emacs-lisp

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)      ;; Install the package if it is not already

#+end_src

*** Verbose startup
:PROPERTIES:
:CUSTOM_ID: verbose-startup
:END:
Uncomment  this if you want a complete list of the packages loaded at startup (useful to inprove startup performante).

#+begin_src emacs-lisp

;; (setq use-package-verbose t)

#+end_src

** Automatic package updates
:PROPERTIES:
:CUSTOM_ID: automatic-package-updates
:END:
The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))

#+end_src

* Keybinding configuration
:PROPERTIES:
:CUSTOM_ID: keybinding-configuration
:END:
** Set ESC to terminate action
:PROPERTIES:
:CUSTOM_ID: set-esc-to-terminate-action
:END:
=ESC= is used in some default emacs keybindings, but I want in [[#evil-mode][evil-mode]] to use it to exit command as =C-g= does.

#+begin_src emacs-lisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Delete selection mode
:PROPERTIES:
:CUSTOM_ID: delete-selection-mode
:END:
By default in Emacs if you select text and start typing it doesent replace the selection. This behaviour can be changed with this variable

#+begin_src emacs-lisp

(delete-selection-mode t)

#+end_src

** Rebind C-u
:PROPERTIES:
:CUSTOM_ID: rebind-c-u
:END:
In [[#evil-mode][evil-mode]] the =C-u= key is reboud to buffer scrolling. I need to bind another key for the =universal-argument= command. =C-M-u= will do the job (in my keabord I use CapsLock as a control key).

#+begin_src emacs-lisp

(global-set-key (kbd "C-M-u") 'universal-argument)

#+end_src

** Evil-mode
:PROPERTIES:
:CUSTOM_ID: evil-mode
:END:
[[https://github.com/emacs-evil/evil][evil-mode]] is a package that binds vi keybindings to emacs. To take a tour of the new bindings use =M-x evil-tutor-start=

#+begin_src emacs-lisp

;; Creates a list of modes when to use emacs state mode
(defun orion/evil-hook ()
  (dolist (mode '(custom-mode
                  eshell-mode
                  git-rebase-mode
                  erc-mode
                  circe-server-mode
                  circe-chat-mode
                  circe-query-mode
                  sauron-mode
                  term-mode))
  (add-to-list 'evil-emacs-state-modes mode)))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  (setq evil-undo-system 'undo-tree)
  :config
  (add-hook 'evil-mode-hook 'orion/evil-hook)
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motion even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :custom
  (evil-collection-outline-bind-tap-p nil)
  :config
  (delete 'lispy evil-collection-mode-list)
  (delete 'org-present evil-collection-mode-list)
  (evil-collection-init))

;; Emacs version of the vim tutor
(use-package evil-tutor
  :commands evil-tutor-start)

#+end_src

** Undo-tree
:PROPERTIES:
:CUSTOM_ID: undo-tree
:END:
In emacs the undo chai is a powerfull yet hard to grasp tool. The [[https://github.com/apchamberlain/undo-tree.el][undo-tree]] package helps understand and use this tool, also with a graphic rapresentation.

#+begin_src emacs-lisp

(use-package undo-tree
  :after evil
  :defer 0
  :init
  :config
  (global-undo-tree-mode 1)
  (setq undo-tree-auto-save-history nil))

#+end_src

** Which key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:
[[https://github.com/justbur/emacs-which-key][which-key]] is a package that displays a panel when you start a keybinding to display all the possible completions.

#+begin_src emacs-lisp

(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))  ;; Delay before the panel is shown since the key was pressed

#+end_src

** General
:PROPERTIES:
:CUSTOM_ID: general
:END:
[[https://github.com/noctuid/general.el][general]] is a package used to configure custom keybindings.

#+begin_src emacs-lisp

(use-package general
  :after evil
  :config
  (general-evil-setup t)
  (general-create-definer orion/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))

#+end_src

** Hydra
:PROPERTIES:
:CUSTOM_ID: hydra
:END: 
[[https://github.com/abo-abo/hydra][hydra]] is a package that can create a minibuffer to perfosm centain actions.

#+begin_src emacs-lisp

(use-package hydra
  :defer t)

#+end_src

* UI configuration
:PROPERTIES:
:CUSTOM_ID: ui-configuration
:END:
** Basic UI config
:PROPERTIES:
:CUSTOM_ID: basic-ui-config
:END:
Cleaning up emacs to make it look more minimal.

#+begin_src emacs-lisp

;;(scroll-bar-mode -1)       ; Disable visible scrollbar ;; For now I'll keep it :)
(tool-bar-mode -1)         ; Disable the toolbar
(tooltip-mode -1)          ; Disable tooltips
(set-fringe-mode 7)        ; Instert space on the sides

(menu-bar-mode -1)         ; Disable the menu bar
(scroll-bar-mode -1)          ; Disable the scroll bar

(setq visible-bell t)      ; Set up the visible bell

#+end_src

Enable line numbers

#+begin_src emacs-lisp

(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line number for some modes
(dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
                treemacs-mode-hook
		  eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

Set frame transparency and maximize window at start

#+begin_src emacs-lisp

(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

Scrolling

#+begin_src emacs-lisp

(setq mouse-wheel-scroll-amount '(3 ((shift) . 1) ((meta) . 5))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

#+end_src

** Theme
:PROPERTIES:
:CUSTOM_ID: theme
:END:
I use [[https://github.com/doomemacs/themes][doom-themes]] since it has beautiful color themes. I also made a theme myself using this package. The theme is called [[./orion-blue-theme.el][orion-blue]].

#+begin_src emacs-lisp

(use-package doom-themes)
(load-theme 'orion-blue t)
;;(load-theme 'doom-dracula t)
;;(load-theme 'doom-dark+ t)
;;(load-theme 'doom-one t)
;;(load-theme 'doom-monokai-classic t)
;;(load-theme 'doom-solarized-dark t)
;;(load-theme 'doom-tomorrow-night t)

(orion/leader-keys
  "t"  '(:ignore t :which-key "toggles")
  "tw" '(whitespace-mode :which-key "show hidden chars")
  "tt" '(counsel-load-theme :which-key "choose theme"))

#+end_src

** Dashboard
:PROPERTIES:
:CUSTOM_ID: dashboard
:END:
The [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] package provides a startup streen with recent files, bookmarks and other cool stuff.

#+begin_src emacs-lisp

(use-package dashboard
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner 'logo) ;; standard logo
  ;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; custom image
  (setq dashboard-center-content nil)
  (setq dashboard-items '((recents . 5)
                          ;;(agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			              (bookmarks . "book"))))

(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

#+end_src

** Font configuration
:PROPERTIES:
:CUSTOM_ID: font-configuration
:END:
Here we configure the fonts. The size must be adjusted dependinding on the dpi of the screen

#+begin_src emacs-lisp

(defvar orion/default-font-size 128)
(defvar orion/default-variable-font-size 128)

(set-face-attribute 'default nil :font "Ubuntu Mono" :height orion/default-font-size)

(set-face-attribute 'fixed-pitch nil :font "Monospace" :height 120)

(set-face-attribute 'variable-pitch nil :font "Ubuntu" :height orion/default-variable-font-size :weight 'light)

#+end_src

*** Text scaling
:PROPERTIES:
:CUSTOM_ID: text-scaling
:END:
Creating a box with the package [[#hydra][hydra]] to scale the text dimensions.

#+begin_src emacs-lisp

(defhydra hydra-text-scale (:timeout 5)
  "Scale text"
  ("j" text-scale-increase "In")
  ("k" text-scale-decrease "Out")
  ("f" nil "Finished" :exit t))

(orion/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

*** Unicode glyph
:PROPERTIES:
:CUSTOM_ID: unicode-glyph
:END:
For now commented out since one of the libraries is outdated.

#+begin_src emacs-lisp

  ;; (defun orion/replace-unicode-font-mapping (block-name old-font new-font)
  ;;   (let* ((block-idx (cl-position-if
  ;;                          (lambda (i) (string-equal (car i) block-name))
  ;;                          unicode-fonts-block-font-mapping))
  ;;          (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
  ;;          (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
  ;;     (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
  ;;           `(,updated-block))))

  ;; (use-package unicode-fonts :custom (unicode-fonts-skip-font-groups
  ;;   '(low-quality-glyphs)) :config ;; Fix the font mappings to use
  ;;   the right emoji font (mapcar (lambda (block-name)
  ;;   (orion/replace-unicode-font-mapping block-name "Apple Color
  ;;   Emoji" "Noto Color Emoji")) '("Dingbats" "Emoticons"
  ;;   "Miscellaneous Symbols and Pictographs" "Transport and Map
  ;;   Symbols")) (unicode-fonts-setup))

#+end_src

*** Emojis
:PROPERTIES:
:CUSTOM_ID: emojis
:END:
[[https://github.com/iqbalansari/emacs-emojify][emojify]] is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp

(use-package emojify
  :hook (erc-mode . emojify-mode)
  :commands emojify-mode)

#+end_src

** Icons
:PROPERTIES:
:CUSTOM_ID: icons
:END:
[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is an icon pack that can be usefull in the dashboard and in the modeline.
*NOTE:* the first time you load your configuration on a new machine. you'll need to run =M-x all-the-icons-install-fonts= to download the icons needed.

#+begin_src emacs-lisp

(use-package all-the-icons)

#+end_src

** Modeline
:PROPERTIES:
:CUSTOM_ID: modeline
:END:
*** Time configuration
:PROPERTIES:
:CUSTOM_ID: time-configuration
:END:

#+begin_src emacs-lisp

(setq display-time-format "%l:%M %p %b %y"
      display-time-default-load-average nil)

#+end_src

*** Diminish mode
:PROPERTIES:
:CUSTOM_ID: diminish-mode
:END:
[[https://github.com/emacsmirror/diminish][diminish]] is a package that hides some minor modes, making them continue working.

#+begin_src emacs-lisp

(use-package diminish)

#+end_src

*** Minions
:PROPERTIES:
:CUSTOM_ID: minions
:END:
[[https://github.com/tarsius/minions][minions]] creates a menu that list activated minor modes and the most used ones.

#+begin_src emacs-lisp

(use-package minions
  :hook (doom-modeline-mode . minions-mode))

#+end_src

*** Doom modeline
:PROPERTIES:
:CUSTOM_ID: doom-modeline
:END:
We use [[https://seagle0128.github.io/doom-modeline/][doom-modeline]] as a sobstitute for the plain modeline.

#+begin_src emacs-lisp

(use-package doom-modeline
  :init 
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (setq doom-modeline-minor-modes t)
  (setq doom-modeline-indent-info t))

#+end_src

** Workspaces
:PROPERTIES:
:CUSTOM_ID: workspaces
:END:
[[https://github.com/nex3/perspective-el][perspective]] provides tagged workspaces in emacs similar to the window managers' ones. This can be useful to work on multiple projects at the same time. Each perspective is composed of a window configuration and a set of buffers.
To access the perspective commands, use the =C-c M-p= prefix.

#+begin_src emacs-lisp

(use-package perspective
  :demand t
  :bind (("C-M-k" . persp-switch)
         ("C-M-n" . persp-next)
         ("C-x k" . persp-kill-buffer*)
         ("C-x b" . persp-counsel-switch-buffer))
  :custom
  (persp-initial-frame-name "Main")
  :config
  (customize-set-variable 'persp-mode-prefix-key (kbd "C-c M-p"))
  ;; Running `persp-mode' multiple times resets the perspective list...
  (unless (equal persp-mode t)
    (persp-mode)))

#+end_src

** Notifications
:PROPERTIES:
:CUSTOM_ID: notifications
:END:
[[https://github.com/jwiegley/alert][alert]] is a package to show notification from other packages.

#+begin_src emacs-lisp

(use-package alert
  :commands alert)

#+end_src

* Auto saving configuration
:PROPERTIES:
:CUSTOM_ID: auto-saving-configuration
:END:
** Backup Location
:PROPERTIES:
:CUSTOM_ID: backup-location
:END:
This configuration set the backup location in =~/.config/emacs/backup=, so that they don't bother you

#+begin_src emacs-lisp

(setq backup-directory-alist '(("." . "~/.config/emacs/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )

#+end_src

** Super save
:PROPERTIES:
:CUSTOM_ID: super-save
:END:
[[https://github.com/bbatsov/super-save][super-save]] is a package that saves your buffers when certain events occour such as switching buffer or buffer losing focus. 

#+begin_src emacs-lisp

(use-package super-save
  :defer 1
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t)
  (setq auto-save-default nil))

#+end_src

** Auto reverting
:PROPERTIES:
:CUSTOM_ID: auto-reverting
:END:

#+begin_src emacs-lisp

;; Revert Dired and other non file buffers
(setq global-auto-revert-non-file-buffers t)

;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)

#+end_src

* Editing configuration
:PROPERTIES:
:CUSTOM_ID: editing-configuration
:END:
** Tab configuration
:PROPERTIES:
:CUSTOM_ID: tab-configuration
:END:
Use spaces instead of tabs

#+begin_src emacs-lisp

(setq-default indent-tabs-mode nil)

#+end_src

Set default indentation to 2 spaces

#+begin_src emacs-lisp

(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)

#+end_src

** Commenting
:PROPERTIES:
:CUSTOM_ID: commentig
:END:
Emacs’ built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn’t always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior. I’ve bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs’ =M-;= binding with this command.

#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Automatically clear whitespaces
:PROPERTIES:
:CUSTOM_ID: automatically-clear-whitespaces
:END:
[[https://github.com/lewang/ws-butler][ws-butler]] is a package that cleares whitespaces at the end of the line. It makes it in an unobtrusive way, meaning that you wont notice it in action.

#+begin_src emacs-lisp

(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))

#+end_src

** Code folding
:PROPERTIES:
:CUSTOM_ID: code-folding
:END:
[[https://www.emacswiki.org/emacs/HideShow][hideshow]] is a builtin package that enables you to collapse regions of code.

#+begin_src emacs-lisp

(use-package hideshow
  :hook (prog-mode . hs-minor-mode))

#+end_src

** Rainbow delimiters
:PROPERTIES:
:CUSTOM_ID: rainbow-delimiters
:END:
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is a minor mode that colorizes nested parentheses following the color scheme in use.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Rainbow mode
:PROPERTIES:
:CUSTOM_ID: rainbow-mode
:END:
[[https://github.com/emacsmirror/rainbow-mode][rainbow-mode]] hilights the colors with the corresponding tonality. To use it simply do
=M-x rainbow-mode=

#+begin_src emacs-lisp

(use-package rainbow-mode)

#+end_src

** Highlight indentation
:PROPERTIES:
:CUSTOM_ID: highlight-indentation
:END:
[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] is a package that highlights indentation via many forms. I chose a vertical line (similar to the visual studio one).

#+begin_src emacs-lisp

(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config 
  (setq highlight-indent-guides-method 'character))

#+end_src

* Emacs completion
:PROPERTIES:
:CUSTOM_ID: emacs-completion
:END:
** Ivy and Counsel
:PROPERTIES:
:CUSTOM_ID: ivy-and-counsel
:END:
[[https://github.com/abo-abo/swiper][ivy]] is a completion framework.  It provides a menu when you open files, switch buffer and other tasks. [[https://github.com/abo-abo/swiper][counsel]] is a replacement for the vanilla commands e.g. replaces =find-file= with =counsel-find-file= adding extra features.
[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to the counsel commands to provide more information about them.

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
 :config
  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
	       ("C-x C-f" . counsel-find-file)
	       :map minibuffer-local-map
	       ("C-r" . 'counsel-minibuffer-history)))

#+end_src

** Helpful commands
:PROPERTIES:
:CUSTOM_ID: helpful-commands
:END:
[[https://github.com/Wilfred/helpful][helpful]] adds informations to the =describe-command= buffers. It also displays the source code of the functions.

#+begin_src emacs-lisp

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* File management
:PROPERTIES:
:CUSTOM_ID: file-management
:END:
** Dired
:PROPERTIES:
:CUSTOM_ID: dired
:END:
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] is a very powerfull built-in file manager for emacs. Here are some of the most important key bindings:
*** Key Bindings
:PROPERTIES:
:CUSTOM_ID: key-bindings
:END:
**** Navigation
*Emacs* /  *Evil*
- =n= / =j= - next line 
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)
 
**** Marking files
- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files
- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files
- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives
- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations
- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration
:PROPERTIES:
:CUSTOM_ID: dired-configuration
:END:

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)
  (setq delete-by-moving-to-trash t))

(use-package dired-single
  :after dired)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :after dired
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv"))))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

* Org Mode
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:
Thies section contains the configuration for [[https://orgmode.org/][org-mode]]

** Basic configuration

#+begin_src emacs-lisp

(defun orion/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil)
  (diminish org-indent-mode))


(use-package org
  :hook (org-mode . orion/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-cycle-separator-lines 2
        org-capture-bookmark nil)

  (setq org-agenda-start-with-log-mode t)
  (orion/org-font-setup)
  (setq org-agenda-files
	'("~/.config/emacs/tasks/task.org")))

#+end_src

*** Bullets
org-bullest replaces the heading stars in org-mode buffers

#+begin_src emacs-lisp

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Centered buffer
We are going te use visual fill column te center =org-mode= buffers

#+begin_src emacs-lisp

(defun orion/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . orion/org-mode-visual-fill))

#+end_src

** Font configuration
:PROPERTIES:
:CUSTOM_ID: org-font-configuration
:END:
Here will be defined the =orion/org-font-setup= function that configures the text faces of [[#org-mode][org-mode]].

#+begin_src emacs-lisp

(defun orion/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Configure babel languages
 #+begin_src emacs-lisp

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

(setq org-confirma-babel-evaluate nil)

#+end_src

** Configure source bloks

#+begin_src emacs-lisp

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
(add-to-list 'org-structure-template-alist '("li" . "src lisp"))
(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))

(defun orion/org-babel-tangle-config()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.config/emacs/Emacs.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'orion/org-babel-tangle-config)))

#+end_src

** Bindings

#+begin_src emacs-lisp

(orion/leader-keys
  "o"   '(:ignore t :which-key "org mode")

  "oi"  '(:ignore t :which-key "insert")
  "oil" '(org-insert-link :which-key "insert link")

  "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

  "os"  '(dw/counsel-rg-org-files :which-key "search notes")

  "oa"  '(org-agenda :which-key "status")
  "ot"  '(org-todo-list :which-key "todos")
  "oc"  '(org-capture t :which-key "capture")
  "ox"  '(org-export-dispatch t :which-key "export"))

#+end_src

** Table of contents

#+begin_src emacs-lisp

(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))

#+end_src

* Development
** Magit
[[https://magit.vc/][magit]] is a package to interface with Git, executing operations from a dedicated panel.

#+begin_src emacs-lisp

(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(orion/leader-keys
  "g"   '(:ignore t :which-key "git")
  "gs"  'magit-status
  "gd"  'magit-diff-unstaged
  "gc"  'magit-branch-or-checkout
  "gl"   '(:ignore t :which-key "log")
  "glc" 'magit-log-current
  "glf" 'magit-log-buffer-file
  "gb"  'magit-branch
  "gP"  'magit-push-current
  "gp"  'magit-pull-branch
  "gf"  'magit-fetch
  "gF"  'magit-fetch-all
  "gr"  'magit-rebase)

#+end_src

** Projectile
[[https://projectile.mx/][projectile]] is a project manager that makes a lot easier to navigate around projects. There are lots of packages that integrate with projectile, so it is useful to have it installed even if not used

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-complition-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))

(orion/leader-keys
  "p"   '(:ignore t :which-key "projectile")
  "pf"  'projectile-find-file
  "ps"  'projectile-switch-project
  "pF"  'consult-ripgrep
  "pp"  'projectile-find-file
  "pc"  'projectile-compile-project
  "pd"  'projectile-dired)

#+end_src

** Lsp mode
*** Language Servers

#+begin_src emacs-lisp

(defun orion/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . orion/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l") ;;Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

(orion/leader-keys
  "l"  '(:ignore t :which-key "lsp")
  "ld" 'xref-find-definitions
  "lr" 'xref-find-references
  "ln" 'lsp-ui-find-next-reference
  "lp" 'lsp-ui-find-prev-reference
  "ls" 'counsel-imenu
  "le" 'lsp-ui-flycheck-list
  "lS" 'lsp-ui-sideline-mode
  "lX" 'lsp-execute-code-action)

;;Introduce more ui improves such as sideline
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

#+end_src

*** TypeScript

#+begin_src emacs-lisp

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))

#+end_src

*** C++

#+begin_src emacs-lisp

  (use-package cc-mode
      :ensure nil
      :hook (c++-mode . lsp-deferred)
      :config
      (setq lsp-clangd-binary-path "/usr/lib/llvm-15/bin/clangd-15"))

#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python3"))

#+end_src

** AUCTex
[[https://emacsdocs.org/docs/auctex/Top][auctex]] is a package that transforms emacs in a TeX environment

#+begin_src emacs-lisp

  (use-package auctex
    :hook (latex-mode . auctex))

#+end_src

** Company Mode
Company mode is a package that shows a box for autocomplition (in this case provided by lsp)

#+begin_src emacs-lisp

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

** Treemacs
lsp-treemacs provides tree views for different aspects of your project such as files or objects.
Some useful commands are (to use with =M-x=)
- =lsp-treemacs-symbols=
- =lsp-treemacs-references=
- =lsp-treemacs-error-list=

#+begin_src emacs-lisp

(use-package lsp-treemacs
  :after lsp)

#+end_src

** Minimap
Still to finish configuring

#+begin_src emacs-lisp

(use-package minimap
  :commands minimap-mode
  :custom
  (minimap-width-fraction 0.08)
  (minimap-minimum-width 15)
  (minimap-window-location 'right)
  (minimap-update-delay 0)
  (minimap-dedicated-window nil))

#+end_src

** Lsp-ivy
lsp-ivy allows to search more easily for symbols inside a project. Some useful commands are
- =lsp-ivy-workspace-symbol=
- =lsp-ivy-global-workspace-symbol=

#+begin_src emacs-lisp

(use-package lsp-ivy
  :after ivy)

#+end_src

* Terminal
** term-mode
Term mode is a terminal emulator written in Emacs Lisp (so it could be slow).
One important thing to understand is =line-mode= versus =char-mode=. =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal. While using term-mode, you will want to be in =char-mode= for any terminal applications that have their own keybindings. If you’re just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil’s insert mode (press =i=). You will automatically be switched back to =line-mode= when you enter Evil’s normal mode (press =ESC=).

Run a terminal with =M-x term!=

Useful key bindings:

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer’s prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have evil-collection installed, term-mode will enter char mode when you use Evil’s Insert mode


#+begin_src emacs-lisp

(use-package term
  :commands term
  :config
  (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
  ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args
  ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better Colors
The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to. Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program. Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm
=vterm= is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications. This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] dependencies installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))

#+end_src

** shell-mode
=shell-mode= is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

** Eshell
=Eshell= is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

(defun orion/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt
  :after eshell)

(use-package eshell
  :hook (eshell-first-time-mode . orion/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'multiline2))

#+end_src

* Runtime performance
:PROPERTIES:
:CUSTOM_ID: runtime-performance
:END:
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

* Credits
I need to thank especially [[https://github.com/daviwil][David Wilson]] for his amazing emacs from scrach series and his dotfiles from which I took inspiration. Also thanks to [[https://gitlab.com/dwt1][Derek Taylor]] for his videos that really helped.
